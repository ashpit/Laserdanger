configStruct = struct( ...
    'dataFolder', '/Volumes/camera/DO-lidar/data-lvx/', ...
    "processHFolder", "/Volumes/camera/DO-lidar/Processed_Hourly", ...
    "processFolder", "/Volumes/camera/DO-lidar/Processed_daily", ...
    "plotFolder", "/Volumes/camera/DO-lidar/laserdanger", ...
    'transformMatrix', [-0.949241568721, -0.247004601089, -0.194754130260, 476196.822115626768; ... 
    0.241085658086, -0.969005091712, 0.053915097151, 3636332.802218010183; ... 
    -0.202035020918, 0.004226023738, 0.979369180159, 10.481421693595; ...
    0.000000000000, 0.000000000000, 0.000000000000, 1.000000000000
     ], ...
     'LidarBoundary', [476190.822581, 476185.016129, 475999.919355, 476029.274194;... 
     3636353.450920, 3636316.937617, 3636300.996933, 3636453.144172]');


jsonText = jsonencode(configStruct, 'PrettyPrint', true);
fid = fopen('livox_config.json', 'w');
fwrite(fid, jsonText, 'char');
fclose(fid);


% blickfeld transformation matrix
        % -0.244522958994, -0.962178707123, -0.120086275041, 476196.819366455078; ...
        %  0.008030226454,  0.121832095087, -0.992518246174, 3636332.755462646484; ...
        %  0.969610273838, -0.243657812476, -0.022064233199, 10.533929824829; ...
        %  0.0, 0.0, 0.0, 1.0 ...
%% for ehukai

configStruct = struct( ...
    'dataFolder', '/project/ceph/Projects/DO-lidar/data-lvx/', ...
    'processFolder', '/project/ceph/Projects/DO-lidar/Processed_daily', ...
    'plotFolder', '/project/ceph/Projects/DO-lidar/laserdanger', ...
    'transformMatrix', [-0.949241568721, -0.247004601089, -0.194754130260, 476196.822115626768; ... 
    0.241085658086, -0.969005091712, 0.053915097151, 3636332.802218010183; ... 
    -0.202035020918, 0.004226023738, 0.979369180159, 10.481421693595; ...
    0.000000000000, 0.000000000000, 0.000000000000, 1.000000000000 
     ], ...
     'LidarBoundary', [476190.822581, 476185.016129, 475999.919355, 476029.274194;... 
     3636353.450920, 3636316.937617, 3636300.996933, 3636453.144172]');

jsonText = jsonencode(configStruct, 'PrettyPrint', true);
fid = fopen('livox_config2.json', 'w');
fwrite(fid, jsonText, 'char');
fclose(fid);

%% for ehukai pt 2


configStruct = struct( ...
    'dataFolder', '/project/camera/DO-lidar/data-lvx/', ...
    'processFolder', '/project/camera/DO-lidar/Processed_daily', ...
    'plotFolder', '/project/camera/DO-lidar/laserdanger', ...
    'transformMatrix', [-0.949241568721, -0.247004601089, -0.194754130260, 476196.822115626768; ... 
    0.241085658086, -0.969005091712, 0.053915097151, 3636332.802218010183; ... 
    -0.202035020918, 0.004226023738, 0.979369180159, 10.481421693595; ...
    0.000000000000, 0.000000000000, 0.000000000000, 1.000000000000 
     ], ....
     'LidarBoundary', [476190.822581, 476185.016129, 475999.919355, 476029.274194;... 
     3636353.450920, 3636316.937617, 3636300.996933, 3636453.144172]');

jsonText = jsonencode(configStruct, 'PrettyPrint', true);
fid = fopen('livox_config.json', 'w');
fwrite(fid, jsonText, 'char');
fclose(fid);

%% Livox tmatrix using 2m offset on groundcontrol points

Tnew_June =  [ ...
        -0.949302625438, -0.244290090870, -0.197855697009, 476196.851055338280; ...
        0.238370397735, -0.969695132867, 0.053580806053, 3636332.823261848651; ...
        -0.204948966379, 0.003701458669, 0.978765661629, 10.423920231542; ...
        0.000000000000, 0.000000000000, 0.000000000000, 1.000000000000; ...
     ];

Tnew__July = [-0.949241568721, -0.247004601089, -0.194754130260, 476196.822115626768; ... 
    0.241085658086, -0.969005091712, 0.053915097151, 3636332.802218010183; ... 
    -0.202035020918, 0.004226023738, 0.979369180159, 10.481421693595; ...
    0.000000000000, 0.000000000000, 0.000000000000, 1.000000000000 ];


%% New transformation matrix

% RMS error 0.07
 [ -0.950241738321, -0.243770127062, -0.193950416101, 476196.825894786278; ...
     0.238243774489, -0.969828661039, 0.051694024260, 3636332.807127794251; ...
-0.200700131217, 0.002914340278, 0.979648387918, 10.410606258970; ...
0.000000000000, 0.000000000000, 0.000000000000, 1.000000000000];

[ -0.950131255288, -0.245052609764, -0.192872538672, 476196.844243035652; ...
0.238676453030, -0.969483260747, 0.055997838354, 3636332.847799383570; ...
-0.200709114130, 0.007171163032, 0.979624635218, 10.419544648124; ...
0.000000000000, 0.000000000000, 0.000000000000, 1.000000000000];


%%

T1 = [ ...
        -0.949302625438, -0.244290090870, -0.197855697009, 476196.851055338280; ...
        0.238370397735, -0.969695132867, 0.053580806053, 3636332.823261848651; ...
        -0.204948966379, 0.003701458669, 0.978765661629, 10.423920231542; ...
        0.000000000000, 0.000000000000, 0.000000000000, 1.000000000000]; 

T2 = [-0.949241568721, -0.247004601089, -0.194754130260, 476196.822115626768; ... 
    0.241085658086, -0.969005091712, 0.053915097151, 3636332.802218010183; ... 
    -0.202035020918, 0.004226023738, 0.979369180159, 10.481421693595; ...
    0.000000000000, 0.000000000000, 0.000000000000, 1.000000000000 ];

% Extract plane normals (3rd column of rotation matrix)
n1 = T1(1:3, 3);
n2 = T2(1:3, 3);

% Project onto x-z plane (ignore y component)
n1_xz = [n1(1); n1(3)];
n2_xz = [n2(1); n2(3)];

% Normalize
n1_xz = n1_xz / norm(n1_xz);
n2_xz = n2_xz / norm(n2_xz);

% Compute angle in radians and convert to degrees
angle_rad = acos(dot(n1_xz, n2_xz));
angle_deg = rad2deg(angle_rad);

fprintf('Angle between planes (in x-z direction): %.6f radians\n', angle_rad);

%%

figure; clf
quiver(0, 0, n1_xz(1), n1_xz(2), 0, 'r', 'LineWidth', 2); hold on;
quiver(0, 0, n2_xz(1), n2_xz(2), 0, 'b', 'LineWidth', 2);
axis equal
grid on
xlabel('X')
ylabel('Z')
title(sprintf('Plane Normals in X-Z (Angle = %.2fÂ°)', angle_deg))
legend('Plane 1', 'Plane 2')

%%

% Create a 2D grid (XY plane at Z=0)
[x, y] = meshgrid(-1:0.2:1, -1:0.2:1);
z = zeros(size(x));
N = numel(x);

% Reshape into homogeneous coordinates: 4xN
P = [x(:)'; y(:)'; z(:)'; ones(1, N)];

% Apply transformation matrices
P1 = T1 * P;
P2 = T2 * P;

% Reshape back to meshgrid shape
x1 = reshape(P1(1, :), size(x));
y1 = reshape(P1(2, :), size(y));
z1 = reshape(P1(3, :), size(z));

x2 = reshape(P2(1, :), size(x));
y2 = reshape(P2(2, :), size(y));
z2 = reshape(P2(3, :), size(z));

% Plot the original and transformed planes
figure; clf
surf(x1, y1, z1, 'FaceAlpha', 0.5, 'EdgeColor', 'none', 'FaceColor', 'r'); hold on;
surf(x2, y2, z2, 'FaceAlpha', 0.5, 'EdgeColor', 'none', 'FaceColor', 'b');

axis equal
grid on
xlabel('X'); ylabel('Y'); zlabel('Z')
title('Transformed Planes: Red = T1, Blue = T2')
legend('Plane 1', 'Plane 2')
view(3)
